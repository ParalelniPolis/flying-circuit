{"version":3,"file":"static/webpack/static/development/pages/index.js.767250d23f00c48c0173.hot-update.js","sources":["webpack:///./components/SubscribeForm.jsx"],"sourcesContent":["import { useState, createRef } from \"react\";\nimport Reaptcha from \"reaptcha\";\nimport NodeRSA from \"node-rsa\";\nimport PUBLIC_KEY from '../keys/public'\nimport PRIVATE_KEY from '../keys/private'\n\nconst ENCODING = \"base64\";\n\nvar rsa = new NodeRSA(PRIVATE_KEY);\nrsa.importKey(PUBLIC_KEY);\n\nconst initialState = {\n  email: \"\",\n  name: \"\",\n  projectDescription: \"\",\n  track: \"Privacy\",\n  honeypot: \"\",\n  error: \"\",\n  submitted: false,\n  loading: false,\n  recaptchaLoaded: false,\n  recaptchaVerified: false,\n};\n\nexport function SubscribeForm() {\n  const [state, setState] = useState(initialState);\n  // TODO: find out why recaptcha resets the state\n  const emailRef = createRef();\n  const nameRef = createRef();\n  const descRef = createRef();\n  const trackRef = createRef();\n\n  function updateState(newState) {\n    setState({ ...state, ...newState });\n  }\n\n  function onRecaptchaVerified() {\n    updateState({\n      recaptchaVerified: true,\n      email: emailRef.current.value,\n      name: nameRef.current.value,\n      projectDescription: descRef.current.value,\n      track: trackRef.current.value,\n    });\n  }\n\n  async function sendToSpreadsheet() {\n    const previousEmail = localStorage.getItem(\"hfc2019-email\");\n\n    if (previousEmail === state.email) {\n      updateState({ submitted: true, error: \"You already are on our list.\" });\n      return false;\n    }\n\n    if (!state.email) {\n      updateState({ submitted: true, error: \"Email is missing.\" });\n      return false;\n    }\n\n    if (!state.name) {\n      updateState({ submitted: true, error: \"Your name/nickname is missing.\" });\n      return false;\n    }\n\n    if (!state.projectDescription) {\n      updateState({ submitted: true, error: \"Please describe what you're planning to work on during the event!\" });\n      return false;\n    }\n\n    try {\n      updateState({ loading: true });\n\n      const res = await fetch(\n        `${process.env.GOOGLE_SCRIPT_URL}?name=${encodeURIComponent(\n          rsa.encrypt(state.name, ENCODING)\n        )}&email=${encodeURIComponent(rsa.encrypt(state.email, ENCODING))}&track=${encodeURIComponent(\n          rsa.encrypt(state.track, ENCODING)\n        )}&description=${encodeURIComponent(rsa.encrypt(state.projectDescription, ENCODING))}`\n      );\n      if (res.status === 200) {\n        updateState({ submitted: true, error: \"\", loading: false });\n        localStorage.setItem(\"hfc2019-email\", state.email);\n      }\n    } catch (err) {\n      updateState({ submitted: true, error: err.message, loading: false });\n    }\n  }\n\n  return (\n    <form\n      onSubmit={async e => {\n        e.preventDefault();\n\n        if (e.target.honeypot.value || state.honeypot) {\n          return false;\n        }\n\n        await sendToSpreadsheet();\n      }}\n    >\n      <input\n        className=\"honeypot\"\n        type=\"text\"\n        name=\"honeypot\"\n        defaultValue=\"\"\n        onChange={e => updateState({ honeypot: e.target.value })}\n      />\n      <input className=\"u-full-width\" ref={emailRef} type=\"email\" name=\"email\" placeholder=\"Email\" id=\"email-input\" />\n\n      <input\n        className=\"u-full-width\"\n        ref={nameRef}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Name/Nickname\"\n        id=\"name-input\"\n      />\n\n      <label className=\"u-pull-left\" htmlFor=\"track-select\">Preferred track</label>\n\n      <select className=\"u-full-width\" id=\"track-select\" ref={trackRef}>\n        <option value=\"Privacy\">Privacy</option>\n        <option value=\"Decentralization\">Decentralization</option>\n        <option value=\"Urban Hacktivism\">Urban Hacktivism</option>\n      </select>\n\n      <textarea\n        className=\"u-full-width\"\n        ref={descRef}\n        type=\"text\"\n        name=\"description\"\n        placeholder=\"What you'd like to hack?\"\n        id=\"project-description-input\"\n      />\n\n      <Reaptcha sitekey={process.env.GOOGLE_RECAPTCHA_KEY} theme=\"dark\" onVerify={onRecaptchaVerified} />\n\n      <input\n        className={`button ${state.recaptchaVerified ? \"\" : \"button-disabled\"}`}\n        type=\"submit\"\n        value=\"RSVP\"\n        disabled={!state.recaptchaVerified}\n      />\n\n      {state.loading ? (\n        <div className=\"row\">Loading...</div>\n      ) : (\n        state.submitted &&\n        (state.error ? (\n          <div className=\"row\">\n            <div>{state.error}</div>\n          </div>\n        ) : (\n          <div className=\"row\">\n            <div>Submitted! We're excited to see you at the event.</div>\n          </div>\n        ))\n      )}\n      <style jsx>{`\n        .honeypot {\n          display: none;\n        }\n\n        .button-disabled,\n        .button-disabled:hover,\n        .button-disabled:focus {\n          color: #777777;\n          border: 1px solid #777777;\n          text-decoration: line-through;\n        }\n      `}</style>\n      <style jsx global>{`\n        .g-recaptcha {\n          margin-bottom: 20px;\n        }\n      `}</style>\n    </form>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AArBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAsBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAJA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AAAA;AATA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AAAA;AAAA;AAAA;AAdA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AAAA;AAAA;AAAA;AAnBA;AACA;AADA;AAAA;AAwBA;AAAA;AAAA;AAxBA;AAAA;AACA;AADA;AA0BA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AArCA;AAAA;AACA;AADA;AAAA;AAAA;AAsCA;AAAA;AAAA;AAAA;AAAA;AACA;AAvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBA;AAAA;AACA;AA+DA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyFA;;;;A","sourceRoot":""}